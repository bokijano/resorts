{"version":3,"sources":["components/Navbar.js","pages/Home.js","pages/Rooms.js","pages/SingleRoom.js","pages/Error.js","App.js","serviceWorker.js","Context.js","index.js"],"names":["Navbar","state","isOpen","handleToggle","_this","setState","react_default","a","createElement","className","react_router_dom","to","type","index_esm","onClick","this","Component","Home","Rooms","SingleRoom","Error","App","Fragment","Navbar_Navbar","react_router","exact","path","component","Boolean","window","location","hostname","match","ProductContext","React","createContext","ProductProvider","Provider","props","children","Consumer","ReactDOM","render","Context_ProductProvider","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"8QAKqBA,oNACnBC,MAAQ,CACNC,QAAQ,KAEVC,aAAe,WACbC,EAAKC,SAAS,CACZH,QAASE,EAAKH,MAAMC,kFAItB,OACEI,EAAAC,EAAAC,cAAA,OAAKC,UAAU,UACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,cACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,cACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QACbH,EAAAC,EAAAC,cAACE,EAAA,EAAD,CAAMC,GAAG,KACPL,EAAAC,EAAAC,cAAA,QAAMC,UAAU,SAAhB,YACAH,EAAAC,EAAAC,cAAA,QAAMC,UAAU,UAAhB,aAIJH,EAAAC,EAAAC,cAAA,UAAQI,KAAK,SAASH,UAAU,WAC9BH,EAAAC,EAAAC,cAACK,EAAA,EAAD,CAAcJ,UAAU,WAAWK,QAASC,KAAKZ,iBAGrDG,EAAAC,EAAAC,cAAA,MACEC,UAAWM,KAAKd,MAAMC,OAAS,qBAAuB,aAEtDI,EAAAC,EAAAC,cAAA,UACEF,EAAAC,EAAAC,cAACE,EAAA,EAAD,CAAMD,UAAU,SAASE,GAAG,KAA5B,SAIFL,EAAAC,EAAAC,cAAA,UACEF,EAAAC,EAAAC,cAACE,EAAA,EAAD,CAAMC,GAAG,UAAT,aAEFL,EAAAC,EAAAC,cAAA,UACEF,EAAAC,EAAAC,cAACE,EAAA,EAAD,CAAMC,GAAG,aAAT,aAEFL,EAAAC,EAAAC,cAAA,UACEF,EAAAC,EAAAC,cAACE,EAAA,EAAD,CAAMC,GAAG,gBAAT,2BAxCsBK,cCHrB,SAASC,IACtB,OACEX,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,kCCHS,SAASU,IACtB,OACEZ,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,uCCHeW,mLAEjB,OACEb,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,gDAJgCQ,aCAzB,SAASI,IACtB,OACEd,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,+CCuBSa,mLAdX,OACEf,EAAAC,EAAAC,cAACF,EAAAC,EAAMe,SAAP,KACEhB,EAAAC,EAAAC,cAACe,EAAD,MACAjB,EAAAC,EAAAC,cAACgB,EAAA,EAAD,KACElB,EAAAC,EAAAC,cAACgB,EAAA,EAAD,CAAOC,OAAK,EAACC,KAAK,IAAIC,UAAWV,IACjCX,EAAAC,EAAAC,cAACgB,EAAA,EAAD,CAAOC,OAAK,EAACC,KAAK,SAASC,UAAWT,IACtCZ,EAAAC,EAAAC,cAACgB,EAAA,EAAD,CAAOC,OAAK,EAACC,KAAK,iBAAiBC,UAAWR,IAC9Cb,EAAAC,EAAAC,cAACgB,EAAA,EAAD,CAAOG,UAAWP,aATVJ,aCAEY,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DChBN,IAAMC,EAAiBC,IAAMC,gBAERC,mLAEjB,OACE9B,EAAAC,EAAAC,cAACyB,EAAeI,SAAhB,KAA0BtB,KAAKuB,MAAMC,iBAHEvB,aAQrBiB,EAAeO,SCLvCC,IAASC,OACPpC,EAAAC,EAAAC,cAACmC,EAAD,KACErC,EAAAC,EAAAC,cAACE,EAAA,EAAD,KACEJ,EAAAC,EAAAC,cAACoC,EAAD,QAGJC,SAASC,eAAe,SFoHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.02227106.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport { FaAlignRight } from \"react-icons/fa\";\r\nimport { Link } from \"react-router-dom\";\r\nimport \"./navbar.css\";\r\n\r\nexport default class Navbar extends Component {\r\n  state = {\r\n    isOpen: false\r\n  };\r\n  handleToggle = () => {\r\n    this.setState({\r\n      isOpen: !this.state.isOpen\r\n    });\r\n  };\r\n  render() {\r\n    return (\r\n      <nav className=\"navbar\">\r\n        <div className=\"nav-center\">\r\n          <div className=\"nav-header\">\r\n            <div className=\"logo\">\r\n              <Link to=\"/\">\r\n                <span className=\"first\">Mountain</span>\r\n                <span className=\"second\">Resorts</span>\r\n              </Link>\r\n            </div>\r\n\r\n            <button type=\"button\" className=\"nav-btn\">\r\n              <FaAlignRight className=\"nav-icon\" onClick={this.handleToggle} />\r\n            </button>\r\n          </div>\r\n          <ul\r\n            className={this.state.isOpen ? \"nav-links show-nav\" : \"nav-links\"}\r\n          >\r\n            <li>\r\n              <Link className=\"active\" to=\"/\">\r\n                Home\r\n              </Link>\r\n            </li>\r\n            <li>\r\n              <Link to=\"/rooms\">Kopaonik</Link>\r\n            </li>\r\n            <li>\r\n              <Link to=\"/zlatibor\">Zlatibor</Link>\r\n            </li>\r\n            <li>\r\n              <Link to=\"/oldMountain\">Old Mountain</Link>\r\n            </li>\r\n          </ul>\r\n        </div>\r\n      </nav>\r\n    );\r\n  }\r\n}\r\n","import React from \"react\";\r\n\r\nexport default function Home() {\r\n  return (\r\n    <div>\r\n      <p>hello from Home page</p>\r\n    </div>\r\n  );\r\n}\r\n","import React from \"react\";\r\n\r\nexport default function Rooms() {\r\n  return (\r\n    <div>\r\n      <p>Hello from rooms page</p>\r\n    </div>\r\n  );\r\n}\r\n","import React, { Component } from \"react\";\r\n\r\nexport default class SingleRoom extends Component {\r\n  render() {\r\n    return (\r\n      <div>\r\n        <p>Hello from single room page</p>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React from \"react\";\r\n\r\nexport default function Error() {\r\n  return (\r\n    <div>\r\n      <p>Hello from error page</p>\r\n    </div>\r\n  );\r\n}\r\n","import React, { Component } from \"react\";\nimport \"./App.css\";\n\nimport Navbar from \"./components/Navbar.js\";\n\nimport Home from \"./pages/Home.js\";\nimport Rooms from \"./pages/Rooms.js\";\nimport SingleRoom from \"./pages/SingleRoom.js\";\nimport Error from \"./pages/Error.js\";\n\nimport { Route, Switch } from \"react-router-dom\";\n\nclass App extends Component {\n  render() {\n    return (\n      <React.Fragment>\n        <Navbar />\n        <Switch>\n          <Route exact path=\"/\" component={Home} />\n          <Route exact path=\"/rooms\" component={Rooms} />\n          <Route exact path=\"/rooms/:single\" component={SingleRoom} />\n          <Route component={Error} />\n        </Switch>\n      </React.Fragment>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React, { Component } from \"react\";\r\n\r\nconst ProductContext = React.createContext();\r\n\r\nexport default class ProductProvider extends Component {\r\n  render() {\r\n    return (\r\n      <ProductContext.Provider>{this.props.children}</ProductContext.Provider>\r\n    );\r\n  }\r\n}\r\n\r\nconst ProductConsumer = ProductContext.Consumer;\r\n\r\nexport { ProductConsumer, ProductProvider };\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport { BrowserRouter as Router } from \"react-router-dom\";\nimport { ProductProvider } from \"./Context.js\";\n\nReactDOM.render(\n  <ProductProvider>\n    <Router>\n      <App />\n    </Router>\n  </ProductProvider>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}